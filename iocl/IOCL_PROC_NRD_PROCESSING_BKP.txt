DROP PROCEDURE IF EXISTS iocl.IOCL_PROC_NRD_PROCESSING;
CREATE PROCEDURE iocl.`IOCL_PROC_NRD_PROCESSING`()
BEGIN
DECLARE CNT,IS_PROC,NCNT,VCNT,NP,SNO,PREVNP INT DEFAULT 0;
DECLARE VEH_ID,VEH_NO,VMU_NO,CELL_NO,C_VEH_ID VARCHAR(50);
DECLARE STATUS VARCHAR(500);
DECLARE STATUS_TIME,C_MSG_TIME,CHK_TIME,MAX_CHK_TIME DATETIME;
DECLARE MSG_TYPE,C_MSG_TYPE VARCHAR(500);
DECLARE C_MSG_HEADER VARCHAR(10);
DECLARE LAT,LONGI,C_LAT,C_LONGI DECIMAL(20,15);
DECLARE`IOCL_DAILY_NRD_STATUS_NEW`,LOCATION,CITY,DISTRICT,STATE,C_LOCATION,C_CITY,C_DISTRICT,C_STATE VARCHAR(1500);
DECLARE SPEED,C_SPEED FLOAT DEFAULT 0;
DECLARE V1_FINISH INT DEFAULT 0;
DECLARE V2_FINISH INT DEFAULT 0;
DECLARE V3_FINISH INT DEFAULT 0;
DECLARE V4_FINISH INT DEFAULT 0;
DECLARE chck,chckmsg,chckloss BOOLEAN default true;

INSERT INTO HTP_EXECUTION_TIME_LOG VALUES ('START', 'IOCL_PROC_NRD_PROCESSING', NOW());

BEGIN
	DECLARE C_MSG_SEARCH_PARK CURSOR FOR SELECT DISTINCT IDNS_VEH_ID,`IDNS_VEH_NO`,`IDNS_VMU_NO`,`IDNS_CELL_NO`,`IDNS_INTIAL_MSG_TIME`,`IDNS_INTIAL_MSG_TYPE`,`IDNS_SPEED`,`IDNS_LATITUDE`,`IDNS_LONGITUDE`,`IDNS_LOCATION`,`IDNS_CITY`,`IDNS_DISTRICT`,`IDNS_STATE`,`IDNS_INTIAL_STATUS`,IDNS_IS_PROC FROM IOCL_DAILY_NRD_STATUS_NEW
	WHERE IDNS_INTIAL_STATUS IN ('P','NR','N') and (IDNS_UPD_STATUS <> 'R' or IDNS_UPD_STATUS IS NULL);
	-- AND IDNS_IS_PROC = 1;

	DECLARE CONTINUE HANDLER FOR NOT FOUND SET V1_FINISH=1;
	OPEN C_MSG_SEARCH_PARK;
	A: LOOP
	FETCH C_MSG_SEARCH_PARK INTO VEH_ID,VEH_NO,VMU_NO,CELL_NO,STATUS_TIME,MSG_TYPE,SPEED,LAT,LONGI,LOCATION,CITY,DISTRICT,STATE,STATUS,IS_PROC;

	IF V1_FINISH=1 THEN
		LEAVE A;
	END IF;

	SELECT COUNT(*) INTO CNT FROM ETRK_IN_MSGS_TRANS WHERE EIM_VEHICLE_ID = VEH_ID AND DATE(EIM_MESSAGE_CREATED_TIME) = DATE(NOW());
	IF CNT >0 THEN
		SELECT EIM_MESSAGE_CREATED_TIME,EIM_SPEED,EIM_LOCATION,EIM_CITY,EIM_DISTRICT,EIM_STATE,EIM_MESSAGE_TYPE,EIM_LATITUDE,EIM_LONGITUDE INTO C_MSG_TIME,C_SPEED,C_LOCATION,C_CITY,C_DISTRICT,C_STATE,C_MSG_TYPE,C_LAT,C_LONGI FROM ETRK_IN_MSGS_TRANS WHERE EIM_VEHICLE_ID = VEH_ID ;
		
		 -- -- INSERT INTO test05 values (concat('Reporting Today',' ',C_MSG_TIME,',vehicle id,',VEH_ID));
		
		UPDATE IOCL_DAILY_NRD_STATUS_NEW SET IDNS_UPD_STATUS = 'R',`IDNS_UPD_CREATED_TIME` = C_MSG_TIME,`IDNS_UPD_MESSAGE_TYPE`= C_MSG_TYPE,`IDNS_SPEED` = C_SPEED ,`IDNS_LATITUDE` = C_LAT,`IDNS_LONGITUDE` = C_LONGI,`IDNS_LOCATION` = C_LOCATION ,`IDNS_CITY`= C_CITY,`IDNS_DISTRICT` = C_DISTRICT,`IDNS_STATE` = C_STATE WHERE IDNS_VEH_ID = VEH_ID;
	SET C_MSG_TIME = NULL;
	SET C_MSG_TYPE = NULL;
	SET C_SPEED = NULL;
	SET C_LOCATION = NULL;
	SET C_CITY = NULL;
	SET C_DISTRICT = NULL;
	SET C_STATE = NULL;
	SET C_LAT = NULL;	
	SET C_LONGI = NULL;
	END IF;

	SET V1_FINISH=0;	
	END LOOP A; 
	SET V1_FINISH=0;
	CLOSE C_MSG_SEARCH_PARK;
END;

-- Added for changing status to parked if invoice is generated after last reported time.

BEGIN
	DECLARE SPK_IS_PROC,SPK_INV_CNT INT DEFAULT 0;
	DECLARE SPK_VEH_ID, SPK_VEH_NO, SPK_VMU_NO, SPK_CELL_NO VARCHAR(50);
	DECLARE SPK_STATUS VARCHAR(500);
	DECLARE SPK_STATUS_TIME DATETIME;
	DECLARE SPK_MSG_TYPE VARCHAR(500);
	DECLARE SPK_LAT, SPK_LONGI DECIMAL(20,15);
	DECLARE SPK_LOCATION, SPK_CITY, SPK_DISTRICT, SPK_STATE VARCHAR(1500);
	DECLARE SPK_SPEED FLOAT DEFAULT 0;
	DECLARE SPK_V1_FINISH INT DEFAULT 0;

	DECLARE SPK_C_MSG_SEARCH_PARK CURSOR FOR SELECT DISTINCT IDNS_VEH_ID,IDNS_VEH_NO,IDNS_VMU_NO,IDNS_CELL_NO,IDNS_INTIAL_MSG_TIME,IDNS_INTIAL_MSG_TYPE,IDNS_SPEED,IDNS_LATITUDE,IDNS_LONGITUDE,IDNS_LOCATION,IDNS_CITY,
	IDNS_DISTRICT,IDNS_STATE,IDNS_INTIAL_STATUS,IDNS_IS_PROC 
	FROM IOCL_DAILY_NRD_STATUS_NEW
	WHERE IDNS_INTIAL_STATUS ='N' AND IDNS_IS_PROC = 0 and (IDNS_UPD_STATUS <> 'R' or IDNS_UPD_STATUS IS NULL) AND IDNS_VMU_NO LIKE 'EFK%' AND IDNS_STATE ='Karnataka';

	DECLARE CONTINUE HANDLER FOR NOT FOUND SET SPK_V1_FINISH=1;
	
	OPEN SPK_C_MSG_SEARCH_PARK;
	SPK_A: LOOP
	FETCH SPK_C_MSG_SEARCH_PARK INTO SPK_VEH_ID, SPK_VEH_NO, SPK_VMU_NO, SPK_CELL_NO, SPK_STATUS_TIME, SPK_MSG_TYPE, SPK_SPEED, SPK_LAT, SPK_LONGI, SPK_LOCATION, SPK_CITY, SPK_DISTRICT, SPK_STATE, SPK_STATUS, SPK_IS_PROC;

	IF SPK_V1_FINISH = 1 THEN
		LEAVE SPK_A;
	END IF;

	SELECT COUNT(*) INTO SPK_INV_CNT FROM IOCL_INVOICE_DATA 
	WHERE IID_VEHICLE_NO = SPK_VEH_NO AND IID_INVOICE_DATE >= SPK_STATUS_TIME;
	
	IF SPK_INV_CNT = 0 THEN
		UPDATE IOCL_DAILY_NRD_STATUS_NEW SET IDNS_UPD_STATUS = 'P',IDNS_IS_PROC = 1 WHERE IDNS_VEH_ID = SPK_VEH_ID;
		INSERT INTO nrdInvoice values (concat('VehicleNo',' ',SPK_VEH_NO,' ','Cnt',' ',SPK_INV_CNT));
    
	END IF;

	END LOOP SPK_A; 
	SET SPK_V1_FINISH = 0;
	CLOSE SPK_C_MSG_SEARCH_PARK;
END;

-- Added for changing status to parked if invoice is generated after last reported time.


BEGIN
	DECLARE C_MSG_SEARCH_NRD CURSOR FOR SELECT DISTINCT IDNS_VEH_ID,`IDNS_VEH_NO`,`IDNS_VMU_NO`,`IDNS_CELL_NO`,`IDNS_INTIAL_MSG_TIME`,`IDNS_INTIAL_MSG_TYPE`,`IDNS_SPEED`,`IDNS_LATITUDE`,`IDNS_LONGITUDE`,
	`IDNS_LOCATION`,`IDNS_CITY`,`IDNS_DISTRICT`,`IDNS_STATE`,`IDNS_INTIAL_STATUS`,IDNS_IS_PROC FROM IOCL_DAILY_NRD_STATUS_NEW
	WHERE IDNS_INTIAL_STATUS = 'N' AND IDNS_IS_PROC = 0 AND SUBSTRING(IDNS_VMU_NO,1,1) = 'E';
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET V2_FINISH=1;
	OPEN C_MSG_SEARCH_NRD;
	B: LOOP
	FETCH C_MSG_SEARCH_NRD INTO VEH_ID,VEH_NO,VMU_NO,CELL_NO,STATUS_TIME,MSG_TYPE,SPEED,LAT,LONGI,LOCATION,CITY,DISTRICT,STATE,STATUS,IS_PROC;
	
	IF V2_FINISH=1 THEN
		LEAVE B;
	END IF;
	
	set CHK_TIME = STATUS_TIME;
	set MAX_CHK_TIME = SUBDATE(STATUS_TIME, 15);
	set chckmsg = true;
	set chck = true;
	
	WHILE chck DO
	if(CHK_TIME > MAX_CHK_TIME) then
		-- INSERT INTO test05 values (concat('MAX CHK_TIME ',' ',MAX_CHK_TIME,',vehicle id,',VEH_ID));
		select COUNT(*) into NCNT from ETRK_IN_MSGS where EIM_VEHICLE_ID = CONVERT(VEH_ID,CHAR) AND EIM_MESSAGE_CREATED_TIME BETWEEN DATE_SUB(CHK_TIME,INTERVAL 15 MINUTE) AND CHK_TIME AND EIM_MESSAGE_CREATED_TIME <> '0000-00-00 00:000:00' ORDER BY EIM_MESSAGE_CREATED_TIME limit 1;
	 -- INSERT INTO test05 values (concat('1 CHK_TIME ',' ',CHK_TIME,',vehicle id,',VEH_ID));
		if NCNT > 0 then
			select EIM_MESSAGE_CREATED_TIME into C_MSG_TIME from ETRK_IN_MSGS where EIM_VEHICLE_ID = CONVERT(VEH_ID,CHAR) AND EIM_MESSAGE_CREATED_TIME BETWEEN DATE_SUB(CHK_TIME,INTERVAL 15 MINUTE)  AND CHK_TIME AND EIM_MESSAGE_CREATED_TIME <> '0000-00-00 00:000:00' ORDER BY EIM_MESSAGE_CREATED_TIME limit 1;
			SELECT count(*) into VCNT from (SELECT @curRank := @curRank + 1 AS UNIQUE_NO,DATE_FORMAT(EIM_MESSAGE_CREATED_TIME,'%d-%m-%y %H:%i'),COUNT(*) cnt FROM ETRK_IN_MSGS,(SELECT @curRank := 0) r
			WHERE EIM_VEHICLE_ID = CONVERT(VEH_ID,CHAR) AND EIM_MESSAGE_CREATED_TIME BETWEEN DATE_SUB(CHK_TIME,INTERVAL 15 MINUTE) AND CHK_TIME group by DATE_FORMAT(EIM_MESSAGE_CREATED_TIME,'%d-%m-%y %H:%i') 
			ORDER BY DATE_FORMAT(EIM_MESSAGE_CREATED_TIME,'%d-%m-%y %H:%i'))a;
			 -- INSERT INTO test05 values (concat('Total Cnt',' ',VCNT,',vehicle id,',VEH_ID));
			if VCNT > 14 then
				set chckloss = true;
				 -- INSERT INTO test05 values (concat('CHK_TIME',' ',CHK_TIME,' ','VEH_ID',' ',VEH_ID));

				BEGIN 
					DECLARE C_SEARCH_MSG_LOSS CURSOR FOR SELECT UNIQUE_NO,a.cnt  from (SELECT @curRank := @curRank + 1 AS UNIQUE_NO,DATE_FORMAT(EIM_MESSAGE_CREATED_TIME,'%d-%m-%y %H:%i'),COUNT(*) cnt FROM ETRK_IN_MSGS,(SELECT @curRank := 0) r
					WHERE EIM_VEHICLE_ID = CONVERT(VEH_ID,CHAR) AND EIM_MESSAGE_CREATED_TIME BETWEEN DATE_SUB(CHK_TIME,INTERVAL 15 MINUTE) AND CHK_TIME group by DATE_FORMAT(EIM_MESSAGE_CREATED_TIME,'%d-%m-%y %H:%i') 
					ORDER BY DATE_FORMAT(EIM_MESSAGE_CREATED_TIME,'%d-%m-%y %H:%i'))a where a.cnt = 1 ORDER BY UNIQUE_NO;
					DECLARE CONTINUE HANDLER FOR NOT FOUND SET V4_FINISH=1;
					 -- INSERT INTO test05 values (concat('V4_FINISH',' ',V4_FINISH));
					OPEN C_SEARCH_MSG_LOSS;
					D: LOOP
					FETCH C_SEARCH_MSG_LOSS INTO SNO,NP;
					 -- INSERT INTO test05 values (concat('SNO',' ',SNO));
					 -- INSERT INTO test05 values (concat('NP',' ',NP));
					IF V4_FINISH=1 THEN
						LEAVE D;
					END IF;
				 -- INSERT INTO test05 values (concat('PREVNP',' ',PREVNP));
				 -- INSERT INTO test05 values (concat('NP',' ',NP));
					if PREVNP = SNO then
          -- APPLY CHECK
          INSERT INTO HTP_EXECUTION_TIME_LOG VALUES (CONCAT('START 1',' - ', VEH_ID, ' - ', C_MSG_TIME), 'IOCL_PROC_NRD_PROCESSING', NOW());
          
						select COUNT(*) INTO VCNT from ETRK_IN_MSGS where EIM_VEHICLE_ID = CONVERT(VEH_ID,CHAR) AND EIM_MESSAGE_CREATED_TIME < C_MSG_TIME AND EIM_MESSAGE_CREATED_TIME <> '0000-00-00 00:000:00' ORDER BY EIM_MESSAGE_CREATED_TIME desc limit 1 ;
            
    INSERT INTO HTP_EXECUTION_TIME_LOG VALUES (CONCAT('END 1',' - ', VEH_ID, ' - ', C_MSG_TIME), 'IOCL_PROC_NRD_PROCESSING', NOW());
    
						 -- INSERT INTO test05 values (concat('2 VCNT',' ',VCNT));
						IF VCNT > 0  THEN
							select EIM_MESSAGE_CREATED_TIME into CHK_TIME from ETRK_IN_MSGS where EIM_VEHICLE_ID = CONVERT(VEH_ID,CHAR) AND EIM_MESSAGE_CREATED_TIME BETWEEN DATE_SUB(C_MSG_TIME,INTERVAL 15 MINUTE)  AND C_MSG_TIME AND EIM_MESSAGE_CREATED_TIME <> '0000-00-00 00:000:00' ORDER BY EIM_MESSAGE_CREATED_TIME DESC limit 1;
							set chck = true;
							set chckmsg = false;
							set chckloss = false;
						ELSE
							set chck = false;
							set chckmsg = false;
							set chckloss = false;
							LEAVE D;
						END IF;
					ELSE
						set PREVNP = SNO+1;
					END IF;
					SET V4_FINISH=0;
					END LOOP D;
					SET V4_FINISH=0;
					CLOSE C_SEARCH_MSG_LOSS;
					if chckloss then
						set chck = false;
						set chckmsg = true;
					end if;
				END;
				
			else
      -- APPLY CHECK
      INSERT INTO HTP_EXECUTION_TIME_LOG VALUES (CONCAT('START 2',' - ', VEH_ID, ' - ', CHK_TIME), 'IOCL_PROC_NRD_PROCESSING', NOW());
      
				select COUNT(*) INTO VCNT from ETRK_IN_MSGS where EIM_VEHICLE_ID = CONVERT(VEH_ID,CHAR) AND EIM_MESSAGE_CREATED_TIME < CHK_TIME AND EIM_MESSAGE_CREATED_TIME <> '0000-00-00 00:000:00' ORDER BY EIM_MESSAGE_CREATED_TIME desc limit 1 ;
        
        INSERT INTO HTP_EXECUTION_TIME_LOG VALUES (CONCAT('END 2',' - ', VEH_ID, ' - ', CHK_TIME), 'IOCL_PROC_NRD_PROCESSING', NOW());
        
				-- INSERT INTO test05 values (concat('2 VCNT',' ',VCNT));
				IF VCNT > 0  THEN
					select EIM_MESSAGE_CREATED_TIME into CHK_TIME from ETRK_IN_MSGS where EIM_VEHICLE_ID = CONVERT(VEH_ID,CHAR) AND EIM_MESSAGE_CREATED_TIME AND EIM_MESSAGE_CREATED_TIME < CHK_TIME AND EIM_MESSAGE_CREATED_TIME <> '0000-00-00 00:000:00' ORDER BY EIM_MESSAGE_CREATED_TIME DESC limit 1;
					set chckmsg = false;
				else
					set chck = false;
					set chckmsg = false;
				 -- INSERT INTO test05 values (concat('Less than 14 records',' ',CHK_TIME,',vehicle id,',VEH_ID));
					UPDATE IOCL_DAILY_NRD_STATUS_NEW SET IDNS_UPD_STATUS = 'N',IDNS_IS_PROC = 1 WHERE IDNS_VEH_ID = VEH_ID;
				end if;
			end if;
		end if;
	else
		-- INSERT INTO test05 values (CONCAT('Greater than 15 days',' ',VEH_ID,' ',CHK_TIME));
		set chck = false;
		UPDATE IOCL_DAILY_NRD_STATUS_NEW SET IDNS_UPD_STATUS = 'N',IDNS_IS_PROC = 1 WHERE IDNS_VEH_ID = VEH_ID;
	end if;
	END WHILE;
	 -- INSERT INTO test05 values (chckmsg);
	
	if chckmsg then
		-- INSERT INTO test05 values (CONCAT('final',' ',VEH_ID,' ',CHK_TIME));

	BEGIN
		DECLARE C_MSG_SEARCH CURSOR FOR SELECT EIM_VEHICLE_ID,EIM_SPEED,EIM_LOCATION,EIM_CITY,EIM_MESSAGE_CREATED_TIME,EIM_DISTRICT,EIM_STATE,EIM_MESSAGE_TYPE,EIM_LATITUDE,EIM_LONGITUDE,SUBSTRING(EIM_MESSAGE,2,2) MESSAGE_HEADER FROM ETRK_IN_MSGS
		WHERE EIM_VEHICLE_ID = CONVERT(VEH_ID,CHAR) AND EIM_MESSAGE_CREATED_TIME BETWEEN DATE_SUB(CHK_TIME,INTERVAL 15 MINUTE) AND CHK_TIME AND SUBSTRING(EIM_MESSAGE,2,2) = 'IS' and EIM_SPEED < 5 ORDER BY EIM_MESSAGE_CREATED_TIME DESC;
		DECLARE CONTINUE HANDLER FOR NOT FOUND SET V3_FINISH=1;
		OPEN C_MSG_SEARCH;
		C: LOOP
		FETCH C_MSG_SEARCH INTO C_VEH_ID,C_SPEED,C_LOCATION,C_CITY,C_MSG_TIME,C_DISTRICT,C_STATE,C_MSG_TYPE,C_LAT,C_LONGI,C_MSG_HEADER;
		IF V3_FINISH=1 THEN
			-- UPDATE IOCL_DAILY_NRD_STATUS_NEW SET IDNS_UPD_STATUS = 'N',IDNS_IS_PROC = 1 WHERE IDNS_VEH_ID = C_VEH_ID;
			LEAVE C;
		END IF;
	
		IF C_MSG_HEADER = 'IS' THEN
			-- UPDATE IOCL_DAILY_NRD_STATUS_NEW SET IDNS_REP_STATUS = 'P',`IDNS_IS_PROC` = 1 WHERE IDNS_VEH_ID = C_VEH_ID;
			
			 -- INSERT INTO test05 values (CONCAT('For parked if true',' ',C_VEH_ID,' ',C_MSG_TIME));
			
			UPDATE IOCL_DAILY_NRD_STATUS_NEW SET IDNS_UPD_STATUS = 'P',`IDNS_UPD_CREATED_TIME` = C_MSG_TIME,`IDNS_UPD_MESSAGE_TYPE`= C_MSG_TYPE,IDNS_IS_PROC = 1 WHERE IDNS_VEH_ID = C_VEH_ID;
			LEAVE C;
		END IF;
		SET V3_FINISH=0;
		-- SELECT C_VEH_ID;
		END LOOP C;
		SET V3_FINISH=0;
		-- UPDATE IOCL_DAILY_NRD_STATUS_NEW SET IDNS_UPD_STATUS = 'N',IDNS_IS_PROC = 1 WHERE IDNS_VEH_ID = C_VEH_ID;
		-- SET V2_FINISH=0;
		CLOSE C_MSG_SEARCH;
	END;
	
	ELSE
		-- INSERT INTO test05 values (CONCAT('For parked if false',' ',VEH_ID,' ',CHK_TIME));
		UPDATE IOCL_DAILY_NRD_STATUS_NEW SET IDNS_UPD_STATUS = 'N',IDNS_IS_PROC = 1 WHERE IDNS_VEH_ID = VEH_ID;
	end if;
	SET V2_FINISH=0;
	END LOOP B; 
	SET V2_FINISH=0;
	CLOSE C_MSG_SEARCH_NRD;
END;

UPDATE IOCL_DAILY_NRD_STATUS_NEW SET IDNS_IS_PROC = 1  WHERE IDNS_IS_PROC = 0 and IDNS_UPD_STATUS is null;
commit;
END;
